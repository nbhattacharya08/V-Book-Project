{"ast":null,"code":"import { domEach, isTag } from '../utils.js';\n/**\n * Set multiple CSS properties for every matched element.\n *\n * @category CSS\n * @param prop - The names of the properties.\n * @param val - The new values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/css/}\n */\nexport function css(prop, val) {\n  if (prop != null && val != null ||\n  // When `prop` is a \"plain\" object\n  typeof prop === 'object' && !Array.isArray(prop)) {\n    return domEach(this, (el, i) => {\n      if (isTag(el)) {\n        // `prop` can't be an array here anymore.\n        setCss(el, prop, val, i);\n      }\n    });\n  }\n  if (this.length === 0) {\n    return undefined;\n  }\n  return getCss(this[0], prop);\n}\n/**\n * Set styles of all elements.\n *\n * @private\n * @param el - Element to set style of.\n * @param prop - Name of property.\n * @param value - Value to set property to.\n * @param idx - Optional index within the selection.\n */\nfunction setCss(el, prop, value, idx) {\n  if (typeof prop === 'string') {\n    const styles = getCss(el);\n    const val = typeof value === 'function' ? value.call(el, idx, styles[prop]) : value;\n    if (val === '') {\n      delete styles[prop];\n    } else if (val != null) {\n      styles[prop] = val;\n    }\n    el.attribs['style'] = stringify(styles);\n  } else if (typeof prop === 'object') {\n    Object.keys(prop).forEach((k, i) => {\n      setCss(el, k, prop[k], i);\n    });\n  }\n}\nfunction getCss(el, prop) {\n  if (!el || !isTag(el)) return;\n  const styles = parse(el.attribs['style']);\n  if (typeof prop === 'string') {\n    return styles[prop];\n  }\n  if (Array.isArray(prop)) {\n    const newStyles = {};\n    prop.forEach(item => {\n      if (styles[item] != null) {\n        newStyles[item] = styles[item];\n      }\n    });\n    return newStyles;\n  }\n  return styles;\n}\n/**\n * Stringify `obj` to styles.\n *\n * @private\n * @category CSS\n * @param obj - Object to stringify.\n * @returns The serialized styles.\n */\nfunction stringify(obj) {\n  return Object.keys(obj).reduce((str, prop) => `${str}${str ? ' ' : ''}${prop}: ${obj[prop]};`, '');\n}\n/**\n * Parse `styles`.\n *\n * @private\n * @category CSS\n * @param styles - Styles to be parsed.\n * @returns The parsed styles.\n */\nfunction parse(styles) {\n  styles = (styles || '').trim();\n  if (!styles) return {};\n  const obj = {};\n  let key;\n  for (const str of styles.split(';')) {\n    const n = str.indexOf(':');\n    // If there is no :, or if it is the first/last character, add to the previous item's value\n    if (n < 1 || n === str.length - 1) {\n      const trimmed = str.trimEnd();\n      if (trimmed.length > 0 && key !== undefined) {\n        obj[key] += `;${trimmed}`;\n      }\n    } else {\n      key = str.slice(0, n).trim();\n      obj[key] = str.slice(n + 1).trim();\n    }\n  }\n  return obj;\n}","map":{"version":3,"sources":["api/css.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,EAAE,KAAK,QAAQ,aAAa;AAwD5C;;;;;;;;AAQG;AACH,OAAM,SAAU,GAAG,CAEjB,IAAiD,EACjD,GAEqE,EAAA;EAErE,IACG,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI;EAC5B;EACC,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAE,EAClD;IACA,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,KAAI;MAC7B,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;QACb;QACA,MAAM,CAAC,EAAE,EAAE,IAAc,EAAE,GAAG,EAAE,CAAC,CAAC;MACnC;IACH,CAAC,CAAC;EACH;EAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;IACrB,OAAO,SAAS;EACjB;EAED,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAc,CAAC;AACxC;AAEA;;;;;;;;AAQG;AACH,SAAS,MAAM,CACb,EAAW,EACX,IAAqC,EACrC,KAGa,EACb,GAAW,EAAA;EAEX,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;IAEzB,MAAM,GAAG,GACP,OAAO,KAAK,KAAK,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK;IAEzE,IAAI,GAAG,KAAK,EAAE,EAAE;MACd,OAAO,MAAM,CAAC,IAAI,CAAC;KACpB,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;MACtB,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG;IACnB;IAED,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;GACxC,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAI;MACjC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC;EACH;AACH;AAsBA,SAAS,MAAM,CACb,EAAW,EACX,IAAwB,EAAA;EAExB,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;EAEvB,MAAM,MAAM,GAAG,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;EACzC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO,MAAM,CAAC,IAAI,CAAC;EACpB;EACD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IACvB,MAAM,SAAS,GAA2B,CAAA,CAAE;IAC5C,IAAI,CAAC,OAAO,CAAE,IAAI,IAAI;MACpB,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;QACxB,SAAS,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC;MAC/B;IACH,CAAC,CAAC;IACF,OAAO,SAAS;EACjB;EACD,OAAO,MAAM;AACf;AAEA;;;;;;;AAOG;AACH,SAAS,SAAS,CAAC,GAA2B,EAAA;EAC5C,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAC5B,CAAC,GAAG,EAAE,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,EAC9D,EAAE,CACH;AACH;AAEA;;;;;;;AAOG;AACH,SAAS,KAAK,CAAC,MAAc,EAAA;EAC3B,MAAM,GAAG,CAAC,MAAM,IAAI,EAAE,EAAE,IAAI,EAAE;EAE9B,IAAI,CAAC,MAAM,EAAE,OAAO,CAAA,CAAE;EAEtB,MAAM,GAAG,GAA2B,CAAA,CAAE;EAEtC,IAAI,GAAuB;EAE3B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IACnC,MAAM,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC;IAC1B;IACA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;MACjC,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE;MAC7B,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,KAAK,SAAS,EAAE;QAC3C,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,OAAO,EAAE;MAC1B;KACF,MAAM;MACL,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;MAC5B,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE;IACnC;EACF;EAED,OAAO,GAAG;AACZ","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { domEach, isTag } from '../utils.js';\n/**\n * Set multiple CSS properties for every matched element.\n *\n * @category CSS\n * @param prop - The names of the properties.\n * @param val - The new values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/css/}\n */\nexport function css(prop, val) {\n    if ((prop != null && val != null) ||\n        // When `prop` is a \"plain\" object\n        (typeof prop === 'object' && !Array.isArray(prop))) {\n        return domEach(this, (el, i) => {\n            if (isTag(el)) {\n                // `prop` can't be an array here anymore.\n                setCss(el, prop, val, i);\n            }\n        });\n    }\n    if (this.length === 0) {\n        return undefined;\n    }\n    return getCss(this[0], prop);\n}\n/**\n * Set styles of all elements.\n *\n * @private\n * @param el - Element to set style of.\n * @param prop - Name of property.\n * @param value - Value to set property to.\n * @param idx - Optional index within the selection.\n */\nfunction setCss(el, prop, value, idx) {\n    if (typeof prop === 'string') {\n        const styles = getCss(el);\n        const val = typeof value === 'function' ? value.call(el, idx, styles[prop]) : value;\n        if (val === '') {\n            delete styles[prop];\n        }\n        else if (val != null) {\n            styles[prop] = val;\n        }\n        el.attribs['style'] = stringify(styles);\n    }\n    else if (typeof prop === 'object') {\n        Object.keys(prop).forEach((k, i) => {\n            setCss(el, k, prop[k], i);\n        });\n    }\n}\nfunction getCss(el, prop) {\n    if (!el || !isTag(el))\n        return;\n    const styles = parse(el.attribs['style']);\n    if (typeof prop === 'string') {\n        return styles[prop];\n    }\n    if (Array.isArray(prop)) {\n        const newStyles = {};\n        prop.forEach((item) => {\n            if (styles[item] != null) {\n                newStyles[item] = styles[item];\n            }\n        });\n        return newStyles;\n    }\n    return styles;\n}\n/**\n * Stringify `obj` to styles.\n *\n * @private\n * @category CSS\n * @param obj - Object to stringify.\n * @returns The serialized styles.\n */\nfunction stringify(obj) {\n    return Object.keys(obj).reduce((str, prop) => `${str}${str ? ' ' : ''}${prop}: ${obj[prop]};`, '');\n}\n/**\n * Parse `styles`.\n *\n * @private\n * @category CSS\n * @param styles - Styles to be parsed.\n * @returns The parsed styles.\n */\nfunction parse(styles) {\n    styles = (styles || '').trim();\n    if (!styles)\n        return {};\n    const obj = {};\n    let key;\n    for (const str of styles.split(';')) {\n        const n = str.indexOf(':');\n        // If there is no :, or if it is the first/last character, add to the previous item's value\n        if (n < 1 || n === str.length - 1) {\n            const trimmed = str.trimEnd();\n            if (trimmed.length > 0 && key !== undefined) {\n                obj[key] += `;${trimmed}`;\n            }\n        }\n        else {\n            key = str.slice(0, n).trim();\n            obj[key] = str.slice(n + 1).trim();\n        }\n    }\n    return obj;\n}\n//# sourceMappingURL=css.js.map"]},"metadata":{},"sourceType":"module"}