{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importDefault(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.replaceCodePoint;\n  }\n});\nObject.defineProperty(exports, \"fromCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.fromCodePoint;\n  }\n});\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n  CharCodes[CharCodes[\"To_LOWER_BIT\"] = 32] = \"To_LOWER_BIT\";\n})(CharCodes || (CharCodes = {}));\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction getDecoder(decodeTree) {\n  return function decodeHTMLBinary(str, strict) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var strIdx = 0;\n    while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n      ret += str.slice(lastIdx, strIdx);\n      lastIdx = strIdx;\n      // Skip the \"&\"\n      strIdx += 1;\n      // If we have a numeric entity, handle this separately.\n      if (str.charCodeAt(strIdx) === CharCodes.NUM) {\n        // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n        var start = strIdx + 1;\n        var base = 10;\n        var cp = str.charCodeAt(start);\n        if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {\n          base = 16;\n          strIdx += 1;\n          start += 1;\n        }\n        do cp = str.charCodeAt(++strIdx); while (cp >= CharCodes.ZERO && cp <= CharCodes.NINE || base === 16 && (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A && (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F);\n        if (start !== strIdx) {\n          var entity = str.substring(start, strIdx);\n          var parsed = parseInt(entity, base);\n          if (str.charCodeAt(strIdx) === CharCodes.SEMI) {\n            strIdx += 1;\n          } else if (strict) {\n            continue;\n          }\n          ret += (0, decode_codepoint_js_1.default)(parsed);\n          lastIdx = strIdx;\n        }\n        continue;\n      }\n      var resultIdx = 0;\n      var excess = 1;\n      var treeIdx = 0;\n      var current = decodeTree[treeIdx];\n      for (; strIdx < str.length; strIdx++, excess++) {\n        treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n        if (treeIdx < 0) break;\n        current = decodeTree[treeIdx];\n        var masked = current & BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n          // If we have a legacy entity while parsing strictly, just skip the number of bytes\n          if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {\n            resultIdx = treeIdx;\n            excess = 0;\n          }\n          // The mask is the number of bytes of the value, including the current byte.\n          var valueLength = (masked >> 14) - 1;\n          if (valueLength === 0) break;\n          treeIdx += valueLength;\n        }\n      }\n      if (resultIdx !== 0) {\n        var valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        ret += valueLength === 1 ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH) : valueLength === 2 ? String.fromCharCode(decodeTree[resultIdx + 1]) : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);\n        lastIdx = strIdx - excess + 1;\n      }\n    }\n    return ret + str.slice(lastIdx);\n  };\n}\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n  // Case 1: Single branch encoded in jump offset\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  }\n  // Case 2: Multiple branches encoded in jump table\n  if (jumpOffset) {\n    var value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  }\n  // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string, allowing for entities not terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str) {\n  return htmlDecoder(str, false);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n  return htmlDecoder(str, true);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n  return xmlDecoder(str, true);\n}\nexports.decodeXML = decodeXML;","map":{"version":3,"sources":["decode.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importDefault(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });\nObject.defineProperty(exports, \"fromCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    /** Bit that needs to be set to convert an upper case ASCII character to lower case */\n    CharCodes[CharCodes[\"To_LOWER_BIT\"] = 32] = \"To_LOWER_BIT\";\n})(CharCodes || (CharCodes = {}));\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction getDecoder(decodeTree) {\n    return function decodeHTMLBinary(str, strict) {\n        var ret = \"\";\n        var lastIdx = 0;\n        var strIdx = 0;\n        while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n            ret += str.slice(lastIdx, strIdx);\n            lastIdx = strIdx;\n            // Skip the \"&\"\n            strIdx += 1;\n            // If we have a numeric entity, handle this separately.\n            if (str.charCodeAt(strIdx) === CharCodes.NUM) {\n                // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n                var start = strIdx + 1;\n                var base = 10;\n                var cp = str.charCodeAt(start);\n                if ((cp | CharCodes.To_LOWER_BIT) === CharCodes.LOWER_X) {\n                    base = 16;\n                    strIdx += 1;\n                    start += 1;\n                }\n                do\n                    cp = str.charCodeAt(++strIdx);\n                while ((cp >= CharCodes.ZERO && cp <= CharCodes.NINE) ||\n                    (base === 16 &&\n                        (cp | CharCodes.To_LOWER_BIT) >= CharCodes.LOWER_A &&\n                        (cp | CharCodes.To_LOWER_BIT) <= CharCodes.LOWER_F));\n                if (start !== strIdx) {\n                    var entity = str.substring(start, strIdx);\n                    var parsed = parseInt(entity, base);\n                    if (str.charCodeAt(strIdx) === CharCodes.SEMI) {\n                        strIdx += 1;\n                    }\n                    else if (strict) {\n                        continue;\n                    }\n                    ret += (0, decode_codepoint_js_1.default)(parsed);\n                    lastIdx = strIdx;\n                }\n                continue;\n            }\n            var resultIdx = 0;\n            var excess = 1;\n            var treeIdx = 0;\n            var current = decodeTree[treeIdx];\n            for (; strIdx < str.length; strIdx++, excess++) {\n                treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n                if (treeIdx < 0)\n                    break;\n                current = decodeTree[treeIdx];\n                var masked = current & BinTrieFlags.VALUE_LENGTH;\n                // If the branch is a value, store it and continue\n                if (masked) {\n                    // If we have a legacy entity while parsing strictly, just skip the number of bytes\n                    if (!strict || str.charCodeAt(strIdx) === CharCodes.SEMI) {\n                        resultIdx = treeIdx;\n                        excess = 0;\n                    }\n                    // The mask is the number of bytes of the value, including the current byte.\n                    var valueLength = (masked >> 14) - 1;\n                    if (valueLength === 0)\n                        break;\n                    treeIdx += valueLength;\n                }\n            }\n            if (resultIdx !== 0) {\n                var valueLength = (decodeTree[resultIdx] & BinTrieFlags.VALUE_LENGTH) >> 14;\n                ret +=\n                    valueLength === 1\n                        ? String.fromCharCode(decodeTree[resultIdx] & ~BinTrieFlags.VALUE_LENGTH)\n                        : valueLength === 2\n                            ? String.fromCharCode(decodeTree[resultIdx + 1])\n                            : String.fromCharCode(decodeTree[resultIdx + 1], decodeTree[resultIdx + 2]);\n                lastIdx = strIdx - excess + 1;\n            }\n        }\n        return ret + str.slice(lastIdx);\n    };\n}\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        var value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string, allowing for entities not terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str) {\n    return htmlDecoder(str, false);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, true);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semi-colon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n    return xmlDecoder(str, true);\n}\nexports.decodeXML = decodeXML;\n//# sourceMappingURL=decode.js.map"]},"metadata":{},"sourceType":"script"}