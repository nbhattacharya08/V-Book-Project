{"ast":null,"code":"import { isTag, hasChildren } from \"domhandler\";\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function filter(test, node) {\n  let recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  if (!Array.isArray(node)) node = [node];\n  return find(test, node, recurse, limit);\n}\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function find(test, nodes, recurse, limit) {\n  const result = [];\n  for (const elem of nodes) {\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) break;\n    }\n    if (recurse && hasChildren(elem) && elem.children.length > 0) {\n      const children = find(test, elem.children, recurse, limit);\n      result.push(...children);\n      limit -= children.length;\n      if (limit <= 0) break;\n    }\n  }\n  return result;\n}\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nexport function findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\nexport function findOne(test, nodes) {\n  let recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let elem = null;\n  for (let i = 0; i < nodes.length && !elem; i++) {\n    const checked = nodes[i];\n    if (!isTag(checked)) {\n      continue;\n    } else if (test(checked)) {\n      elem = checked;\n    } else if (recurse && checked.children.length > 0) {\n      elem = findOne(test, checked.children, true);\n    }\n  }\n  return elem;\n}\n/**\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nexport function existsOne(test, nodes) {\n  return nodes.some(checked => isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children)));\n}\n/**\n * Search and array of nodes and its children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nexport function findAll(test, nodes) {\n  var _a;\n  const result = [];\n  const stack = nodes.filter(isTag);\n  let elem;\n  while (elem = stack.shift()) {\n    const children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(isTag);\n    if (children && children.length > 0) {\n      stack.unshift(...children);\n    }\n    if (test(elem)) result.push(elem);\n  }\n  return result;\n}","map":{"version":3,"sources":["querying.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/domutils/f7e357b5c210b6731c2a60e0b7b3cfaa1f96b706/src/","sourcesContent":["import { isTag, hasChildren } from \"domhandler\";\n/**\n * Search a node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function filter(test, node, recurse = true, limit = Infinity) {\n    if (!Array.isArray(node))\n        node = [node];\n    return find(test, node, recurse, limit);\n}\n/**\n * Search an array of node and its children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function find(test, nodes, recurse, limit) {\n    const result = [];\n    for (const elem of nodes) {\n        if (test(elem)) {\n            result.push(elem);\n            if (--limit <= 0)\n                break;\n        }\n        if (recurse && hasChildren(elem) && elem.children.length > 0) {\n            const children = find(test, elem.children, recurse, limit);\n            result.push(...children);\n            limit -= children.length;\n            if (limit <= 0)\n                break;\n        }\n    }\n    return result;\n}\n/**\n * Finds the first element inside of an array that matches a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nexport function findOneChild(test, nodes) {\n    return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first child node that passes `test`.\n */\nexport function findOne(test, nodes, recurse = true) {\n    let elem = null;\n    for (let i = 0; i < nodes.length && !elem; i++) {\n        const checked = nodes[i];\n        if (!isTag(checked)) {\n            continue;\n        }\n        else if (test(checked)) {\n            elem = checked;\n        }\n        else if (recurse && checked.children.length > 0) {\n            elem = findOne(test, checked.children, true);\n        }\n    }\n    return elem;\n}\n/**\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nexport function existsOne(test, nodes) {\n    return nodes.some((checked) => isTag(checked) &&\n        (test(checked) ||\n            (checked.children.length > 0 &&\n                existsOne(test, checked.children))));\n}\n/**\n * Search and array of nodes and its children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nexport function findAll(test, nodes) {\n    var _a;\n    const result = [];\n    const stack = nodes.filter(isTag);\n    let elem;\n    while ((elem = stack.shift())) {\n        const children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(isTag);\n        if (children && children.length > 0) {\n            stack.unshift(...children);\n        }\n        if (test(elem))\n            result.push(elem);\n    }\n    return result;\n}\n//# sourceMappingURL=querying.js.map"]},"metadata":{},"sourceType":"module"}