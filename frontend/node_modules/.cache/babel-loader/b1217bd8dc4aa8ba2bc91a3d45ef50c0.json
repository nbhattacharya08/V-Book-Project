{"ast":null,"code":"import { decodeXML, decodeHTML, decodeHTMLStrict } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\n/** The level of entities to support. */\nexport var EntityLevel;\n(function (EntityLevel) {\n  /** Support only XML entities. */\n  EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n  /** Support HTML entities, which are a superset of XML entities. */\n  EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\n/** Determines whether some entities are allowed to be written without a trailing `;`. */\nexport var DecodingMode;\n(function (DecodingMode) {\n  /** Support legacy HTML entities. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Do not support legacy HTML entities. */\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n})(DecodingMode || (DecodingMode = {}));\nexport var EncodingMode;\n(function (EncodingMode) {\n  /**\n   * The output is UTF-8 encoded. Only characters that need escaping within\n   * XML will be escaped.\n   */\n  EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n  /**\n   * The output consists only of ASCII characters. Characters that need\n   * escaping within HTML, and characters that aren't ASCII characters will\n   * be escaped.\n   */\n  EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n  /**\n   * Encode all characters that have an equivalent entity, as well as all\n   * characters that are not ASCII characters.\n   */\n  EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n  /**\n   * Encode all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n  EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n  /**\n   * Encode all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n  EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nexport function decode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === DecodingMode.Strict) {\n      return decodeHTMLStrict(data);\n    }\n    return decodeHTML(data);\n  }\n  return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nexport function decodeStrict(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === DecodingMode.Legacy) {\n      return decodeHTML(data);\n    }\n    return decodeHTMLStrict(data);\n  }\n  return decodeXML(data);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nexport function encode(data) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EntityLevel.XML;\n  const opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n  // Mode `UTF8` just escapes XML entities\n  if (opts.mode === EncodingMode.UTF8) return escapeUTF8(data);\n  if (opts.mode === EncodingMode.Attribute) return escapeAttribute(data);\n  if (opts.mode === EncodingMode.Text) return escapeText(data);\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === EncodingMode.ASCII) {\n      return encodeNonAsciiHTML(data);\n    }\n    return encodeHTML(data);\n  }\n  // ASCII and Extensive are equivalent\n  return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML,\n// Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5 } from \"./encode.js\";\nexport { decodeXML, decodeHTML, decodeHTMLStrict,\n// Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict } from \"./decode.js\";","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/entities/867ac709ba482a56a98b7c35f49ca833c74dc193/src/","sourcesContent":["import { decodeXML, decodeHTML, decodeHTMLStrict } from \"./decode.js\";\nimport { encodeHTML, encodeNonAsciiHTML } from \"./encode.js\";\nimport { encodeXML, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\n/** The level of entities to support. */\nexport var EntityLevel;\n(function (EntityLevel) {\n    /** Support only XML entities. */\n    EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */\n    EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel || (EntityLevel = {}));\n/** Determines whether some entities are allowed to be written without a trailing `;`. */\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Support legacy HTML entities. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Do not support legacy HTML entities. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n})(DecodingMode || (DecodingMode = {}));\nexport var EncodingMode;\n(function (EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */\n    EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */\n    EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */\n    EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */\n    EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode || (EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\nexport function decode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === DecodingMode.Strict) {\n            return decodeHTMLStrict(data);\n        }\n        return decodeHTML(data);\n    }\n    return decodeXML(data);\n}\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\nexport function decodeStrict(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === DecodingMode.Legacy) {\n            return decodeHTML(data);\n        }\n        return decodeHTMLStrict(data);\n    }\n    return decodeXML(data);\n}\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\nexport function encode(data, options = EntityLevel.XML) {\n    const opts = typeof options === \"number\" ? { level: options } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8)\n        return escapeUTF8(data);\n    if (opts.mode === EncodingMode.Attribute)\n        return escapeAttribute(data);\n    if (opts.mode === EncodingMode.Text)\n        return escapeText(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return encodeNonAsciiHTML(data);\n        }\n        return encodeHTML(data);\n    }\n    // ASCII and Extensive are equivalent\n    return encodeXML(data);\n}\nexport { encodeXML, escape, escapeUTF8, escapeAttribute, escapeText, } from \"./escape.js\";\nexport { encodeHTML, encodeNonAsciiHTML, \n// Legacy aliases (deprecated)\nencodeHTML as encodeHTML4, encodeHTML as encodeHTML5, } from \"./encode.js\";\nexport { decodeXML, decodeHTML, decodeHTMLStrict, \n// Legacy aliases (deprecated)\ndecodeHTML as decodeHTML4, decodeHTML as decodeHTML5, decodeHTMLStrict as decodeHTML4Strict, decodeHTMLStrict as decodeHTML5Strict, decodeXML as decodeXMLStrict, } from \"./decode.js\";\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}