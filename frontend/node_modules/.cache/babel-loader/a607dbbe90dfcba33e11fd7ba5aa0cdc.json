{"ast":null,"code":"/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nimport { Text, hasChildren } from 'domhandler';\nimport { update as updateDOM } from '../parse.js';\nimport { text as staticText } from '../static.js';\nimport { domEach, cloneDom, isTag, isHtml, isCheerio } from '../utils.js';\nimport { removeElement } from 'domutils';\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nexport function _makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  }\n  if (isCheerio(elem)) {\n    return clone ? cloneDom(elem.get()) : elem.get();\n  }\n  if (Array.isArray(elem)) {\n    return elem.reduce((newElems, el) => newElems.concat(this._makeDomArray(el, clone)), []);\n  }\n  if (typeof elem === 'string') {\n    return this._parse(elem, this.options, false, null).children;\n  }\n  return clone ? cloneDom([elem]) : [elem];\n}\nfunction _insert(concatenator) {\n  return function () {\n    for (var _len = arguments.length, elems = new Array(_len), _key = 0; _key < _len; _key++) {\n      elems[_key] = arguments[_key];\n    }\n    const lastIdx = this.length - 1;\n    return domEach(this, (el, i) => {\n      if (!hasChildren(el)) return;\n      const domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, this._render(el.children)) : elems;\n      const dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n  var _a, _b;\n  const spliceArgs = [spliceIdx, spliceCount, ...newElems];\n  const prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n  const next = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];\n  /*\n   * Before splicing in new elements, ensure they do not already appear in the\n   * current array.\n   */\n  for (let idx = 0; idx < newElems.length; ++idx) {\n    const node = newElems[idx];\n    const oldParent = node.parent;\n    if (oldParent) {\n      const oldSiblings = oldParent.children;\n      const prevIdx = oldSiblings.indexOf(node);\n      if (prevIdx > -1) {\n        oldParent.children.splice(prevIdx, 1);\n        if (parent === oldParent && spliceIdx > prevIdx) {\n          spliceArgs[0]--;\n        }\n      }\n    }\n    node.parent = parent;\n    if (node.prev) {\n      node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n    }\n    if (node.next) {\n      node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n    }\n    node.prev = idx === 0 ? prev : newElems[idx - 1];\n    node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n  }\n  if (prev) {\n    prev.next = newElems[0];\n  }\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n  return array.splice(...spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nexport function appendTo(target) {\n  const appendTarget = isCheerio(target) ? target : this._make(target);\n  appendTarget.append(this);\n  return this;\n}\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nexport function prependTo(target) {\n  const prependTarget = isCheerio(target) ? target : this._make(target);\n  prependTarget.prepend(this);\n  return this;\n}\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexport const append = _insert((dom, children, parent) => {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexport const prepend = _insert((dom, children, parent) => {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n  return function (wrapper) {\n    const lastIdx = this.length - 1;\n    const lastParent = this.parents().last();\n    for (let i = 0; i < this.length; i++) {\n      const el = this[i];\n      const wrap = typeof wrapper === 'function' ? wrapper.call(el, i, el) : typeof wrapper === 'string' && !isHtml(wrapper) ? lastParent.find(wrapper).clone() : wrapper;\n      const [wrapperDom] = this._makeDomArray(wrap, i < lastIdx);\n      if (!wrapperDom || !hasChildren(wrapperDom)) continue;\n      let elInsertLocation = wrapperDom;\n      /*\n       * Find the deepest child. Only consider the first tag child of each node\n       * (ignore text); stop if no children are found.\n       */\n      let j = 0;\n      while (j < elInsertLocation.children.length) {\n        const child = elInsertLocation.children[j];\n        if (isTag(child)) {\n          elInsertLocation = child;\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n      insert(el, elInsertLocation, [wrapperDom]);\n    }\n    return this;\n  };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexport const wrap = _wrap((el, elInsertLocation, wrapperDom) => {\n  const {\n    parent\n  } = el;\n  if (!parent) return;\n  const siblings = parent.children;\n  const index = siblings.indexOf(el);\n  updateDOM([el], elInsertLocation);\n  /*\n   * The previous operation removed the current element from the `siblings`\n   * array, so the `dom` array can be inserted without removing any\n   * additional elements.\n   */\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexport const wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {\n  if (!hasChildren(el)) return;\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nexport function unwrap(selector) {\n  this.parent(selector).not('body').each((_, el) => {\n    this._make(el).replaceWith(el.children);\n  });\n  return this;\n}\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nexport function wrapAll(wrapper) {\n  const el = this[0];\n  if (el) {\n    const wrap = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n    // If html is given as wrapper, wrap may contain text elements\n    let elInsertLocation;\n    for (let i = 0; i < wrap.length; i++) {\n      if (wrap[i].type === 'tag') elInsertLocation = wrap[i];\n    }\n    let j = 0;\n    /*\n     * Find the deepest child. Only consider the first tag child of each node\n     * (ignore text); stop if no children are found.\n     */\n    while (elInsertLocation && j < elInsertLocation.children.length) {\n      const child = elInsertLocation.children[j];\n      if (child.type === 'tag') {\n        elInsertLocation = child;\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n    if (elInsertLocation) this._make(elInsertLocation).append(this);\n  }\n  return this;\n}\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nexport function after() {\n  for (var _len2 = arguments.length, elems = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    elems[_key2] = arguments[_key2];\n  }\n  const lastIdx = this.length - 1;\n  return domEach(this, (el, i) => {\n    const {\n      parent\n    } = el;\n    if (!hasChildren(el) || !parent) {\n      return;\n    }\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    const domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, this._render(el.children)) : elems;\n    const dom = this._makeDomArray(domSrc, i < lastIdx);\n    // Add element after `this` element\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n}\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nexport function insertAfter(target) {\n  if (typeof target === 'string') {\n    target = this._make(target);\n  }\n  this.remove();\n  const clones = [];\n  this._makeDomArray(target).forEach(el => {\n    const clonedSelf = this.clone().toArray();\n    const {\n      parent\n    } = el;\n    if (!parent) {\n      return;\n    }\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(...clonedSelf);\n  });\n  return this._make(clones);\n}\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nexport function before() {\n  for (var _len3 = arguments.length, elems = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    elems[_key3] = arguments[_key3];\n  }\n  const lastIdx = this.length - 1;\n  return domEach(this, (el, i) => {\n    const {\n      parent\n    } = el;\n    if (!hasChildren(el) || !parent) {\n      return;\n    }\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    const domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, this._render(el.children)) : elems;\n    const dom = this._makeDomArray(domSrc, i < lastIdx);\n    // Add element before `el` element\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n}\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nexport function insertBefore(target) {\n  const targetArr = this._make(target);\n  this.remove();\n  const clones = [];\n  domEach(targetArr, el => {\n    const clonedSelf = this.clone().toArray();\n    const {\n      parent\n    } = el;\n    if (!parent) {\n      return;\n    }\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(...clonedSelf);\n  });\n  return this._make(clones);\n}\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nexport function remove(selector) {\n  // Filter if we have selector\n  const elems = selector ? this.filter(selector) : this;\n  domEach(elems, el => {\n    removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n  return this;\n}\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nexport function replaceWith(content) {\n  return domEach(this, (el, i) => {\n    const {\n      parent\n    } = el;\n    if (!parent) {\n      return;\n    }\n    const siblings = parent.children;\n    const cont = typeof content === 'function' ? content.call(el, i, el) : content;\n    const dom = this._makeDomArray(cont);\n    /*\n     * In the case that `dom` contains nodes that already exist in other\n     * structures, ensure those nodes are properly removed.\n     */\n    updateDOM(dom, null);\n    const index = siblings.indexOf(el);\n    // Completely remove old element\n    uniqueSplice(siblings, index, 1, dom, parent);\n    if (!dom.includes(el)) {\n      el.parent = el.prev = el.next = null;\n    }\n  });\n}\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nexport function empty() {\n  return domEach(this, el => {\n    if (!hasChildren(el)) return;\n    el.children.forEach(child => {\n      child.next = child.prev = child.parent = null;\n    });\n    el.children.length = 0;\n  });\n}\nexport function html(str) {\n  if (str === undefined) {\n    const el = this[0];\n    if (!el || !hasChildren(el)) return null;\n    return this._render(el.children);\n  }\n  return domEach(this, el => {\n    if (!hasChildren(el)) return;\n    el.children.forEach(child => {\n      child.next = child.prev = child.parent = null;\n    });\n    const content = isCheerio(str) ? str.toArray() : this._parse(`${str}`, this.options, false, el).children;\n    updateDOM(content, el);\n  });\n}\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nexport function toString() {\n  return this._render(this);\n}\nexport function text(str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return staticText(this);\n  }\n  if (typeof str === 'function') {\n    // Function support\n    return domEach(this, (el, i) => this._make(el).text(str.call(el, i, staticText([el]))));\n  }\n  // Append text node to each selected elements\n  return domEach(this, el => {\n    if (!hasChildren(el)) return;\n    el.children.forEach(child => {\n      child.next = child.prev = child.parent = null;\n    });\n    const textNode = new Text(`${str}`);\n    updateDOM(textNode, el);\n  });\n}\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nexport function clone() {\n  return this._make(cloneDom(this.get()));\n}","map":{"version":3,"sources":["api/manipulation.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nimport { Text, hasChildren } from 'domhandler';\nimport { update as updateDOM } from '../parse.js';\nimport { text as staticText } from '../static.js';\nimport { domEach, cloneDom, isTag, isHtml, isCheerio } from '../utils.js';\nimport { removeElement } from 'domutils';\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nexport function _makeDomArray(elem, clone) {\n    if (elem == null) {\n        return [];\n    }\n    if (isCheerio(elem)) {\n        return clone ? cloneDom(elem.get()) : elem.get();\n    }\n    if (Array.isArray(elem)) {\n        return elem.reduce((newElems, el) => newElems.concat(this._makeDomArray(el, clone)), []);\n    }\n    if (typeof elem === 'string') {\n        return this._parse(elem, this.options, false, null).children;\n    }\n    return clone ? cloneDom([elem]) : [elem];\n}\nfunction _insert(concatenator) {\n    return function (...elems) {\n        const lastIdx = this.length - 1;\n        return domEach(this, (el, i) => {\n            if (!hasChildren(el))\n                return;\n            const domSrc = typeof elems[0] === 'function'\n                ? elems[0].call(el, i, this._render(el.children))\n                : elems;\n            const dom = this._makeDomArray(domSrc, i < lastIdx);\n            concatenator(dom, el.children, el);\n        });\n    };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n    var _a, _b;\n    const spliceArgs = [\n        spliceIdx,\n        spliceCount,\n        ...newElems,\n    ];\n    const prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n    const next = spliceIdx + spliceCount >= array.length\n        ? null\n        : array[spliceIdx + spliceCount];\n    /*\n     * Before splicing in new elements, ensure they do not already appear in the\n     * current array.\n     */\n    for (let idx = 0; idx < newElems.length; ++idx) {\n        const node = newElems[idx];\n        const oldParent = node.parent;\n        if (oldParent) {\n            const oldSiblings = oldParent.children;\n            const prevIdx = oldSiblings.indexOf(node);\n            if (prevIdx > -1) {\n                oldParent.children.splice(prevIdx, 1);\n                if (parent === oldParent && spliceIdx > prevIdx) {\n                    spliceArgs[0]--;\n                }\n            }\n        }\n        node.parent = parent;\n        if (node.prev) {\n            node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n        }\n        if (node.next) {\n            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n        }\n        node.prev = idx === 0 ? prev : newElems[idx - 1];\n        node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n    }\n    if (prev) {\n        prev.next = newElems[0];\n    }\n    if (next) {\n        next.prev = newElems[newElems.length - 1];\n    }\n    return array.splice(...spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nexport function appendTo(target) {\n    const appendTarget = isCheerio(target) ? target : this._make(target);\n    appendTarget.append(this);\n    return this;\n}\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nexport function prependTo(target) {\n    const prependTarget = isCheerio(target) ? target : this._make(target);\n    prependTarget.prepend(this);\n    return this;\n}\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexport const append = _insert((dom, children, parent) => {\n    uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexport const prepend = _insert((dom, children, parent) => {\n    uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n    return function (wrapper) {\n        const lastIdx = this.length - 1;\n        const lastParent = this.parents().last();\n        for (let i = 0; i < this.length; i++) {\n            const el = this[i];\n            const wrap = typeof wrapper === 'function'\n                ? wrapper.call(el, i, el)\n                : typeof wrapper === 'string' && !isHtml(wrapper)\n                    ? lastParent.find(wrapper).clone()\n                    : wrapper;\n            const [wrapperDom] = this._makeDomArray(wrap, i < lastIdx);\n            if (!wrapperDom || !hasChildren(wrapperDom))\n                continue;\n            let elInsertLocation = wrapperDom;\n            /*\n             * Find the deepest child. Only consider the first tag child of each node\n             * (ignore text); stop if no children are found.\n             */\n            let j = 0;\n            while (j < elInsertLocation.children.length) {\n                const child = elInsertLocation.children[j];\n                if (isTag(child)) {\n                    elInsertLocation = child;\n                    j = 0;\n                }\n                else {\n                    j++;\n                }\n            }\n            insert(el, elInsertLocation, [wrapperDom]);\n        }\n        return this;\n    };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexport const wrap = _wrap((el, elInsertLocation, wrapperDom) => {\n    const { parent } = el;\n    if (!parent)\n        return;\n    const siblings = parent.children;\n    const index = siblings.indexOf(el);\n    updateDOM([el], elInsertLocation);\n    /*\n     * The previous operation removed the current element from the `siblings`\n     * array, so the `dom` array can be inserted without removing any\n     * additional elements.\n     */\n    uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexport const wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {\n    if (!hasChildren(el))\n        return;\n    updateDOM(el.children, elInsertLocation);\n    updateDOM(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nexport function unwrap(selector) {\n    this.parent(selector)\n        .not('body')\n        .each((_, el) => {\n        this._make(el).replaceWith(el.children);\n    });\n    return this;\n}\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nexport function wrapAll(wrapper) {\n    const el = this[0];\n    if (el) {\n        const wrap = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n        // If html is given as wrapper, wrap may contain text elements\n        let elInsertLocation;\n        for (let i = 0; i < wrap.length; i++) {\n            if (wrap[i].type === 'tag')\n                elInsertLocation = wrap[i];\n        }\n        let j = 0;\n        /*\n         * Find the deepest child. Only consider the first tag child of each node\n         * (ignore text); stop if no children are found.\n         */\n        while (elInsertLocation && j < elInsertLocation.children.length) {\n            const child = elInsertLocation.children[j];\n            if (child.type === 'tag') {\n                elInsertLocation = child;\n                j = 0;\n            }\n            else {\n                j++;\n            }\n        }\n        if (elInsertLocation)\n            this._make(elInsertLocation).append(this);\n    }\n    return this;\n}\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nexport function after(...elems) {\n    const lastIdx = this.length - 1;\n    return domEach(this, (el, i) => {\n        const { parent } = el;\n        if (!hasChildren(el) || !parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        const domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, this._render(el.children))\n            : elems;\n        const dom = this._makeDomArray(domSrc, i < lastIdx);\n        // Add element after `this` element\n        uniqueSplice(siblings, index + 1, 0, dom, parent);\n    });\n}\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nexport function insertAfter(target) {\n    if (typeof target === 'string') {\n        target = this._make(target);\n    }\n    this.remove();\n    const clones = [];\n    this._makeDomArray(target).forEach((el) => {\n        const clonedSelf = this.clone().toArray();\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n        clones.push(...clonedSelf);\n    });\n    return this._make(clones);\n}\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nexport function before(...elems) {\n    const lastIdx = this.length - 1;\n    return domEach(this, (el, i) => {\n        const { parent } = el;\n        if (!hasChildren(el) || !parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        const domSrc = typeof elems[0] === 'function'\n            ? elems[0].call(el, i, this._render(el.children))\n            : elems;\n        const dom = this._makeDomArray(domSrc, i < lastIdx);\n        // Add element before `el` element\n        uniqueSplice(siblings, index, 0, dom, parent);\n    });\n}\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nexport function insertBefore(target) {\n    const targetArr = this._make(target);\n    this.remove();\n    const clones = [];\n    domEach(targetArr, (el) => {\n        const clonedSelf = this.clone().toArray();\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */\n        if (index < 0)\n            return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index, 0, clonedSelf, parent);\n        clones.push(...clonedSelf);\n    });\n    return this._make(clones);\n}\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nexport function remove(selector) {\n    // Filter if we have selector\n    const elems = selector ? this.filter(selector) : this;\n    domEach(elems, (el) => {\n        removeElement(el);\n        el.prev = el.next = el.parent = null;\n    });\n    return this;\n}\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nexport function replaceWith(content) {\n    return domEach(this, (el, i) => {\n        const { parent } = el;\n        if (!parent) {\n            return;\n        }\n        const siblings = parent.children;\n        const cont = typeof content === 'function' ? content.call(el, i, el) : content;\n        const dom = this._makeDomArray(cont);\n        /*\n         * In the case that `dom` contains nodes that already exist in other\n         * structures, ensure those nodes are properly removed.\n         */\n        updateDOM(dom, null);\n        const index = siblings.indexOf(el);\n        // Completely remove old element\n        uniqueSplice(siblings, index, 1, dom, parent);\n        if (!dom.includes(el)) {\n            el.parent = el.prev = el.next = null;\n        }\n    });\n}\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nexport function empty() {\n    return domEach(this, (el) => {\n        if (!hasChildren(el))\n            return;\n        el.children.forEach((child) => {\n            child.next = child.prev = child.parent = null;\n        });\n        el.children.length = 0;\n    });\n}\nexport function html(str) {\n    if (str === undefined) {\n        const el = this[0];\n        if (!el || !hasChildren(el))\n            return null;\n        return this._render(el.children);\n    }\n    return domEach(this, (el) => {\n        if (!hasChildren(el))\n            return;\n        el.children.forEach((child) => {\n            child.next = child.prev = child.parent = null;\n        });\n        const content = isCheerio(str)\n            ? str.toArray()\n            : this._parse(`${str}`, this.options, false, el).children;\n        updateDOM(content, el);\n    });\n}\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nexport function toString() {\n    return this._render(this);\n}\nexport function text(str) {\n    // If `str` is undefined, act as a \"getter\"\n    if (str === undefined) {\n        return staticText(this);\n    }\n    if (typeof str === 'function') {\n        // Function support\n        return domEach(this, (el, i) => this._make(el).text(str.call(el, i, staticText([el]))));\n    }\n    // Append text node to each selected elements\n    return domEach(this, (el) => {\n        if (!hasChildren(el))\n            return;\n        el.children.forEach((child) => {\n            child.next = child.prev = child.parent = null;\n        });\n        const textNode = new Text(`${str}`);\n        updateDOM(textNode, el);\n    });\n}\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nexport function clone() {\n    return this._make(cloneDom(this.get()));\n}\n//# sourceMappingURL=manipulation.js.map"]},"metadata":{},"sourceType":"module"}