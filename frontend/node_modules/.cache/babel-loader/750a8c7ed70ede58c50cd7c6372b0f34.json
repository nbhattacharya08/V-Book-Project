{"ast":null,"code":"import boolbase from \"boolbase\";\n/**\n * All reserved characters in a regex, used for escaping.\n *\n * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license\n * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794\n */\nconst reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\nfunction escapeRegex(value) {\n  return value.replace(reChars, \"\\\\$&\");\n}\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */\nconst caseInsensitiveAttributes = new Set([\"accept\", \"accept-charset\", \"align\", \"alink\", \"axis\", \"bgcolor\", \"charset\", \"checked\", \"clear\", \"codetype\", \"color\", \"compact\", \"declare\", \"defer\", \"dir\", \"direction\", \"disabled\", \"enctype\", \"face\", \"frame\", \"hreflang\", \"http-equiv\", \"lang\", \"language\", \"link\", \"media\", \"method\", \"multiple\", \"nohref\", \"noresize\", \"noshade\", \"nowrap\", \"readonly\", \"rel\", \"rev\", \"rules\", \"scope\", \"scrolling\", \"selected\", \"shape\", \"target\", \"text\", \"type\", \"valign\", \"valuetype\", \"vlink\"]);\nfunction shouldIgnoreCase(selector, options) {\n  return typeof selector.ignoreCase === \"boolean\" ? selector.ignoreCase : selector.ignoreCase === \"quirks\" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);\n}\n/**\n * Attribute selectors\n */\nexport const attributeRules = {\n  equals(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);\n      };\n    }\n    return elem => adapter.getAttributeValue(elem, name) === value && next(elem);\n  },\n  hyphen(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    const len = value.length;\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return function hyphenIC(elem) {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len).toLowerCase() === value && next(elem);\n      };\n    }\n    return function hyphen(elem) {\n      const attr = adapter.getAttributeValue(elem, name);\n      return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len) === value && next(elem);\n    };\n  },\n  element(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name,\n      value\n    } = data;\n    if (/\\s/.test(value)) {\n      return boolbase.falseFunc;\n    }\n    const regex = new RegExp(`(?:^|\\\\s)${escapeRegex(value)}(?:$|\\\\s)`, shouldIgnoreCase(data, options) ? \"i\" : \"\");\n    return function element(elem) {\n      const attr = adapter.getAttributeValue(elem, name);\n      return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);\n    };\n  },\n  exists(next, _ref, _ref2) {\n    let {\n      name\n    } = _ref;\n    let {\n      adapter\n    } = _ref2;\n    return elem => adapter.hasAttrib(elem, name) && next(elem);\n  },\n  start(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    const len = value.length;\n    if (len === 0) {\n      return boolbase.falseFunc;\n    }\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);\n      };\n    }\n    return elem => {\n      var _a;\n      return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) && next(elem);\n    };\n  },\n  end(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    const len = -value.length;\n    if (len === 0) {\n      return boolbase.falseFunc;\n    }\n    if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        var _a;\n        return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);\n      };\n    }\n    return elem => {\n      var _a;\n      return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) && next(elem);\n    };\n  },\n  any(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name,\n      value\n    } = data;\n    if (value === \"\") {\n      return boolbase.falseFunc;\n    }\n    if (shouldIgnoreCase(data, options)) {\n      const regex = new RegExp(escapeRegex(value), \"i\");\n      return function anyIC(elem) {\n        const attr = adapter.getAttributeValue(elem, name);\n        return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);\n      };\n    }\n    return elem => {\n      var _a;\n      return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) && next(elem);\n    };\n  },\n  not(next, data, options) {\n    const {\n      adapter\n    } = options;\n    const {\n      name\n    } = data;\n    let {\n      value\n    } = data;\n    if (value === \"\") {\n      return elem => !!adapter.getAttributeValue(elem, name) && next(elem);\n    } else if (shouldIgnoreCase(data, options)) {\n      value = value.toLowerCase();\n      return elem => {\n        const attr = adapter.getAttributeValue(elem, name);\n        return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);\n      };\n    }\n    return elem => adapter.getAttributeValue(elem, name) !== value && next(elem);\n  }\n};","map":{"version":3,"sources":["attributes.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/fb55/css-select/0f0725a9dfeddd2fdb54eda9656cdbab5bbf6be6/src/","sourcesContent":["import boolbase from \"boolbase\";\n/**\n * All reserved characters in a regex, used for escaping.\n *\n * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license\n * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794\n */\nconst reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\nfunction escapeRegex(value) {\n    return value.replace(reChars, \"\\\\$&\");\n}\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */\nconst caseInsensitiveAttributes = new Set([\n    \"accept\",\n    \"accept-charset\",\n    \"align\",\n    \"alink\",\n    \"axis\",\n    \"bgcolor\",\n    \"charset\",\n    \"checked\",\n    \"clear\",\n    \"codetype\",\n    \"color\",\n    \"compact\",\n    \"declare\",\n    \"defer\",\n    \"dir\",\n    \"direction\",\n    \"disabled\",\n    \"enctype\",\n    \"face\",\n    \"frame\",\n    \"hreflang\",\n    \"http-equiv\",\n    \"lang\",\n    \"language\",\n    \"link\",\n    \"media\",\n    \"method\",\n    \"multiple\",\n    \"nohref\",\n    \"noresize\",\n    \"noshade\",\n    \"nowrap\",\n    \"readonly\",\n    \"rel\",\n    \"rev\",\n    \"rules\",\n    \"scope\",\n    \"scrolling\",\n    \"selected\",\n    \"shape\",\n    \"target\",\n    \"text\",\n    \"type\",\n    \"valign\",\n    \"valuetype\",\n    \"vlink\",\n]);\nfunction shouldIgnoreCase(selector, options) {\n    return typeof selector.ignoreCase === \"boolean\"\n        ? selector.ignoreCase\n        : selector.ignoreCase === \"quirks\"\n            ? !!options.quirksMode\n            : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);\n}\n/**\n * Attribute selectors\n */\nexport const attributeRules = {\n    equals(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.length === value.length &&\n                    attr.toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return (elem) => adapter.getAttributeValue(elem, name) === value && next(elem);\n    },\n    hyphen(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        const len = value.length;\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function hyphenIC(elem) {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    (attr.length === len || attr.charAt(len) === \"-\") &&\n                    attr.substr(0, len).toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return function hyphen(elem) {\n            const attr = adapter.getAttributeValue(elem, name);\n            return (attr != null &&\n                (attr.length === len || attr.charAt(len) === \"-\") &&\n                attr.substr(0, len) === value &&\n                next(elem));\n        };\n    },\n    element(next, data, options) {\n        const { adapter } = options;\n        const { name, value } = data;\n        if (/\\s/.test(value)) {\n            return boolbase.falseFunc;\n        }\n        const regex = new RegExp(`(?:^|\\\\s)${escapeRegex(value)}(?:$|\\\\s)`, shouldIgnoreCase(data, options) ? \"i\" : \"\");\n        return function element(elem) {\n            const attr = adapter.getAttributeValue(elem, name);\n            return (attr != null &&\n                attr.length >= value.length &&\n                regex.test(attr) &&\n                next(elem));\n        };\n    },\n    exists(next, { name }, { adapter }) {\n        return (elem) => adapter.hasAttrib(elem, name) && next(elem);\n    },\n    start(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        const len = value.length;\n        if (len === 0) {\n            return boolbase.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.length >= len &&\n                    attr.substr(0, len).toLowerCase() === value &&\n                    next(elem));\n            };\n        }\n        return (elem) => {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) &&\n                next(elem);\n        };\n    },\n    end(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        const len = -value.length;\n        if (len === 0) {\n            return boolbase.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                var _a;\n                return ((_a = adapter\n                    .getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);\n            };\n        }\n        return (elem) => {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) &&\n                next(elem);\n        };\n    },\n    any(next, data, options) {\n        const { adapter } = options;\n        const { name, value } = data;\n        if (value === \"\") {\n            return boolbase.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            const regex = new RegExp(escapeRegex(value), \"i\");\n            return function anyIC(elem) {\n                const attr = adapter.getAttributeValue(elem, name);\n                return (attr != null &&\n                    attr.length >= value.length &&\n                    regex.test(attr) &&\n                    next(elem));\n            };\n        }\n        return (elem) => {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) &&\n                next(elem);\n        };\n    },\n    not(next, data, options) {\n        const { adapter } = options;\n        const { name } = data;\n        let { value } = data;\n        if (value === \"\") {\n            return (elem) => !!adapter.getAttributeValue(elem, name) && next(elem);\n        }\n        else if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return (elem) => {\n                const attr = adapter.getAttributeValue(elem, name);\n                return ((attr == null ||\n                    attr.length !== value.length ||\n                    attr.toLowerCase() !== value) &&\n                    next(elem));\n            };\n        }\n        return (elem) => adapter.getAttributeValue(elem, name) !== value && next(elem);\n    },\n};\n//# sourceMappingURL=attributes.js.map"]},"metadata":{},"sourceType":"module"}