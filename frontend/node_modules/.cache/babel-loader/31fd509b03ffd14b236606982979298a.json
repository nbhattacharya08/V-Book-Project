{"ast":null,"code":"import { compute as e } from \"compute-scroll-into-view\";\nlet t = e => \"object\" == typeof e && \"function\" == typeof e.behavior,\n  o = e => !1 === e ? {\n    block: \"end\",\n    inline: \"nearest\"\n  } : (e => e === Object(e) && 0 !== Object.keys(e).length)(e) ? e : {\n    block: \"start\",\n    inline: \"nearest\"\n  };\nfunction n(n, l) {\n  if (!n.isConnected || !n.ownerDocument.documentElement.contains(n)) return;\n  if (t(l)) return l.behavior(e(n, l));\n  let i = \"boolean\" == typeof l || null == l ? void 0 : l.behavior;\n  for (let {\n    el: t,\n    top: r,\n    left: c\n  } of e(n, o(l))) t.scroll({\n    top: r,\n    left: c,\n    behavior: i\n  });\n}\nexport { n as default };","map":{"version":3,"sources":["../src/index.ts"],"names":["options","Object","keys","length","isCustomScrollBehavior","behavior","getOptions","block","inline","scrollIntoView","target","isConnected","ownerDocument","documentElement","contains","compute","el","top","left","scroll"],"mappings":";AAgDA,IAKII,CAAAA,GACFJ,CAAAA,IAEmB,QAAA,IAAA,OAAZA,CAAAA,IAAmD,UAAA,IAAA,OAArBA,CAAAA,CAAQK,QAAAA;EAE3CC,CAAAA,GAAcN,CAAAA,IAAAA,CAEA,CAAA,KAAZA,CAAAA,GACK;IAAEO,KAAAA,EAAO,KAAA;IAAOC,MAAAA,EAAQ;EAAA,CAAA,GAZjCR,CAAAA,CAAAA,IAEAA,CAAAA,KAAYC,MAAAA,CAAOD,CAAAA,CAAAA,IAA4C,CAAA,KAAhCC,MAAAA,CAAOC,IAAAA,CAAKF,CAAAA,CAAAA,CAASG,MAAAA,EAavBH,CAAAA,CAAAA,GAEpBA,CAAAA,GAIF;IAAEO,KAAAA,EAAO,OAAA;IAASC,MAAAA,EAAQ;EAAA,CAAA;AAiCnC,SAASC,CAAAA,CACPC,CAAAA,EACAV,CAAAA,EAAAA;EAIE,IAAA,CAACU,CAAAA,CAAOC,WAAAA,IAAAA,CACPD,CAAAA,CAAOE,aAAAA,CAAeC,eAAAA,CAAiBC,QAAAA,CAASJ,CAAAA,CAAAA,EAEjD;EAGE,IAAA,CAAA,CAA0BV,CAAAA,CAAAA,EAC5B,OAAOA,CAAAA,CAAQK,QAAAA,CAASU,CAAAA,CAAQL,CAAAA,EAAQV,CAAAA,CAAAA,CAAAA;EAG1C,IAAIK,CAAAA,GAA8B,SAAA,IAAA,OAAZL,CAAAA,IAA6C,IAAA,IAATA,CAAAA,GAAAA,KAAZ,CAAA,GAAqB,CAAA,CAAA,QAAA;EAC1D,KAAA,IAAA;IAAA,EAAA,EAAEgB,CAAAA;IAAIC,GAAAA,EAAAA,CAAAA;IAAAA,IAAAA,EAAKC;EAAAA,CAAAA,IAAUH,CAAAA,CAAQL,CAAAA,EAAQJ,CAAAA,CAAWN,CAAAA,CAAAA,CAAAA,EACvDgB,CAAAA,CAAGG,MAAAA,CAAO;IAAEF,GAAAA,EAAAA,CAAAA;IAAKC,IAAAA,EAAAA,CAAAA;IAAMb,QAAAA,EAAAA;EAAAA,CAAAA,CAE3B;AAAA;AAAA,SAAA,CAAA,IAAA,OAAA","sourcesContent":["import { compute } from 'compute-scroll-into-view'\nimport type {\n  Options as BaseOptions,\n  ScrollAction,\n} from 'compute-scroll-into-view'\n\n/** @public */\nexport type Options<T = unknown> =\n  | StandardBehaviorOptions\n  | CustomBehaviorOptions<T>\n\n/**\n * Only scrolls if the `node` is partially out of view:\n * ```ts\n * scrollIntoView(node, { scrollMode: 'if-needed' })\n * ```\n * Skips scrolling `overflow: hidden` elements:\n * ```ts\n * scrollIntoView(node, { skipOverflowHiddenElements: true })\n * ```\n * When scrolling is needed do the least and smoothest scrolling possible:\n * ```ts\n * scrollIntoView(node, {\n *   behavior: 'smooth',\n *   scrollMode: 'if-needed',\n *   block: 'nearest',\n *   inline: 'nearest',\n * })\n * ```\n * @public\n */\nexport interface StandardBehaviorOptions extends BaseOptions {\n  /**\n   * @defaultValue 'auto\n   */\n  behavior?: ScrollBehavior\n}\n\n/** @public */\nexport interface CustomBehaviorOptions<T = unknown> extends BaseOptions {\n  behavior: CustomScrollBehaviorCallback<T>\n}\n\n/** @public */\nexport type CustomScrollBehaviorCallback<T = unknown> = (\n  actions: ScrollAction[]\n) => T\n\nlet isStandardScrollBehavior = (\n  options: any\n): options is StandardBehaviorOptions =>\n  options === Object(options) && Object.keys(options).length !== 0\n\nlet isCustomScrollBehavior = <T = unknown>(\n  options: any\n): options is CustomBehaviorOptions<T> =>\n  typeof options === 'object' ? typeof options.behavior === 'function' : false\n\nlet getOptions = (options: any): StandardBehaviorOptions => {\n  // Handle alignToTop for legacy reasons, to be compatible with the spec\n  if (options === false) {\n    return { block: 'end', inline: 'nearest' }\n  }\n\n  if (isStandardScrollBehavior(options)) {\n    // compute.ts ensures the defaults are block: 'center' and inline: 'nearest', to conform to the spec\n    return options\n  }\n\n  // if options = {}, options = true or options = null, based on w3c web platform test\n  return { block: 'start', inline: 'nearest' }\n}\n\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n * @public\n */\nfunction scrollIntoView(\n  target: Element,\n  options?: StandardBehaviorOptions | boolean\n): void\n/**\n * Scrolls the given element into view, with options for when, and how.\n * Supports the same `options` as [`Element.prototype.scrollIntoView`](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) with additions such as `scrollMode`, `behavior: Function` and `skipOverflowHiddenElements`.\n *\n * You can set the expected return type for `behavior: Function`:\n * ```ts\n * await scrollIntoView<Promise<boolean[]>>(node, {\n *   behavior: async actions => {\n *     return Promise.all(actions.map(\n *       // animate() resolves to `true` if anything was animated, `false` if the element already were in the end state\n *       ({ el, left, top }) => animate(el, {scroll: {left, top}})\n *     ))\n *   }\n * })\n * ```\n * @public\n */\nfunction scrollIntoView<T>(\n  target: Element,\n  options: CustomBehaviorOptions<T>\n): T\nfunction scrollIntoView<T = unknown>(\n  target: Element,\n  options?: StandardBehaviorOptions | CustomBehaviorOptions<T> | boolean\n): T | void {\n  // Browsers treats targets that aren't in the dom as a no-op and so should we\n  if (\n    !target.isConnected ||\n    !target.ownerDocument!.documentElement!.contains(target)\n  ) {\n    return\n  }\n\n  if (isCustomScrollBehavior<T>(options)) {\n    return options.behavior(compute(target, options))\n  }\n\n  let behavior = typeof options === 'boolean' ? undefined : options?.behavior\n  for (let { el, top, left } of compute(target, getOptions(options))) {\n    el.scroll({ top, left, behavior })\n  }\n}\n\nexport default scrollIntoView\n"]},"metadata":{},"sourceType":"module"}