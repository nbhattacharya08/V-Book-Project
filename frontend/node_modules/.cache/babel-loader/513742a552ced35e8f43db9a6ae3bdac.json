{"ast":null,"code":"import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n  const opts = {\n    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  };\n  return isDocument ? parseDocument(content, opts) : parseFragment(context, content, opts);\n}\nconst renderOpts = {\n  treeAdapter: htmlparser2Adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n  /*\n   * `dom-serializer` passes over the special \"root\" node and renders the\n   * node's children in its place. To mimic this behavior with `parse5`, an\n   * equivalent operation must be applied to the input array.\n   */\n  const nodes = 'length' in dom ? dom : [dom];\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    if (isDocument(node)) {\n      Array.prototype.splice.call(nodes, index, 1, ...node.children);\n    }\n  }\n  let result = '';\n  for (let index = 0; index < nodes.length; index += 1) {\n    const node = nodes[index];\n    result += serializeOuter(node, renderOpts);\n  }\n  return result;\n}","map":{"version":3,"sources":["parsers/parse5-adapter.ts"],"names":[],"mappings":"AAAA,SAA4B,UAAU,QAAoB,YAAY;AACtE,SAAS,KAAK,IAAI,aAAa,EAAE,aAAa,EAAE,cAAc,QAAQ,QAAQ;AAC9E,SAAS,OAAO,IAAI,kBAAkB,QAAQ,iCAAiC;AAG/E;;;;;;;;AAQG;AACH,OAAM,SAAU,eAAe,CAC7B,OAAe,EACf,OAAwB,EACxB,UAAmB,EACnB,OAA0B,EAAA;EAE1B,MAAM,IAAI,GAAG;IACX,gBAAgB,EACd,OAAO,OAAO,CAAC,gBAAgB,KAAK,SAAS,GACzC,OAAO,CAAC,gBAAgB,GACxB,IAAI;IACV,WAAW,EAAE,kBAAkB;IAC/B,sBAAsB,EAAE,OAAO,CAAC;GACjC;EAED,OAAO,UAAU,GACb,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,GAC5B,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC;AAC3C;AAEA,MAAM,UAAU,GAAG;EAAE,WAAW,EAAE;AAAkB,CAAE;AAEtD;;;;;AAKG;AACH,OAAM,SAAU,gBAAgB,CAAC,GAAiC,EAAA;EAChE;;;;AAIG;EACH,MAAM,KAAK,GAAG,QAAQ,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;EAC3C,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;IACpD,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC;IACzB,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;MACpB,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/D;EACF;EAED,IAAI,MAAM,GAAG,EAAE;EACf,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,KAAK,IAAI,CAAC,EAAE;IACpD,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC;IACzB,MAAM,IAAI,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC;EAC3C;EAED,OAAO,MAAM;AACf","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { isDocument } from 'domhandler';\nimport { parse as parseDocument, parseFragment, serializeOuter } from 'parse5';\nimport { adapter as htmlparser2Adapter } from 'parse5-htmlparser2-tree-adapter';\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */\nexport function parseWithParse5(content, options, isDocument, context) {\n    const opts = {\n        scriptingEnabled: typeof options.scriptingEnabled === 'boolean'\n            ? options.scriptingEnabled\n            : true,\n        treeAdapter: htmlparser2Adapter,\n        sourceCodeLocationInfo: options.sourceCodeLocationInfo,\n    };\n    return isDocument\n        ? parseDocument(content, opts)\n        : parseFragment(context, content, opts);\n}\nconst renderOpts = { treeAdapter: htmlparser2Adapter };\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */\nexport function renderWithParse5(dom) {\n    /*\n     * `dom-serializer` passes over the special \"root\" node and renders the\n     * node's children in its place. To mimic this behavior with `parse5`, an\n     * equivalent operation must be applied to the input array.\n     */\n    const nodes = 'length' in dom ? dom : [dom];\n    for (let index = 0; index < nodes.length; index += 1) {\n        const node = nodes[index];\n        if (isDocument(node)) {\n            Array.prototype.splice.call(nodes, index, 1, ...node.children);\n        }\n    }\n    let result = '';\n    for (let index = 0; index < nodes.length; index += 1) {\n        const node = nodes[index];\n        result += serializeOuter(node, renderOpts);\n    }\n    return result;\n}\n//# sourceMappingURL=parse5-adapter.js.map"]},"metadata":{},"sourceType":"module"}