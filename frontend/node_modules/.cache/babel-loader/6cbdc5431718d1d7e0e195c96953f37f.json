{"ast":null,"code":"import { default as defaultOptions, flatten as flattenOptions } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n  /**\n   * Create a querying function, bound to a document created from the provided markup.\n   *\n   * Note that similar to web browser contexts, this operation may introduce\n   * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n   * switch to fragment mode and disable this.\n   *\n   * @param content - Markup to be loaded.\n   * @param options - Options for the created instance.\n   * @param isDocument - Allows parser to be switched to fragment mode.\n   * @returns The loaded document.\n   * @see {@link https://cheerio.js.org#loading} for additional usage information.\n   */\n  return function load(content, options) {\n    let isDocument = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (content == null) {\n      throw new Error('cheerio.load() expects a string');\n    }\n    const internalOpts = {\n      ...defaultOptions,\n      ...flattenOptions(options)\n    };\n    const initialRoot = parse(content, internalOpts, isDocument, null);\n    /** Create an extended class here, so that extensions only live on one instance. */\n    class LoadedCheerio extends Cheerio {\n      _make(selector, context) {\n        const cheerio = initialize(selector, context);\n        cheerio.prevObject = this;\n        return cheerio;\n      }\n      _parse(content, options, isDocument, context) {\n        return parse(content, options, isDocument, context);\n      }\n      _render(dom) {\n        return render(dom, this.options);\n      }\n    }\n    function initialize(selector, context) {\n      let root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : initialRoot;\n      let opts = arguments.length > 3 ? arguments[3] : undefined;\n      // $($)\n      if (selector && isCheerio(selector)) return selector;\n      const options = {\n        ...internalOpts,\n        ...flattenOptions(opts)\n      };\n      const r = typeof root === 'string' ? [parse(root, options, false, null)] : 'length' in root ? root : [root];\n      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options);\n      // Add a cyclic reference, so that calling methods on `_root` never fails.\n      rootInstance._root = rootInstance;\n      // $(), $(null), $(undefined), $(false)\n      if (!selector) {\n        return new LoadedCheerio(undefined, rootInstance, options);\n      }\n      const elements = typeof selector === 'string' && isHtml(selector) ?\n      // $(<html>)\n      parse(selector, options, false, null).children : isNode(selector) ?\n      // $(dom)\n      [selector] : Array.isArray(selector) ?\n      // $([dom])\n      selector : undefined;\n      const instance = new LoadedCheerio(elements, rootInstance, options);\n      if (elements) {\n        return instance;\n      }\n      if (typeof selector !== 'string') {\n        throw new Error('Unexpected type of selector');\n      }\n      // We know that our selector is a string now.\n      let search = selector;\n      const searchContext = !context ?\n      // If we don't have a context, maybe we have a root, from loading\n      rootInstance : typeof context === 'string' ? isHtml(context) ?\n      // $('li', '<ul>...</ul>')\n      new LoadedCheerio([parse(context, options, false, null)], rootInstance, options) : (\n      // $('li', 'ul')\n      search = `${context} ${search}`, rootInstance) : isCheerio(context) ?\n      // $('li', $)\n      context :\n      // $('li', node), $('li', [nodes])\n      new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options);\n      // If we still don't have a context, return\n      if (!searchContext) return instance;\n      /*\n       * #id, .class, tag\n       */\n      return searchContext.find(search);\n    }\n    // Add in static methods & properties\n    Object.assign(initialize, staticMethods, {\n      load,\n      // `_root` and `_options` are used in static methods.\n      _root: initialRoot,\n      _options: internalOpts,\n      // Add `fn` for plugins\n      fn: LoadedCheerio.prototype,\n      // Add the prototype here to maintain `instanceof` behavior.\n      prototype: LoadedCheerio.prototype\n    });\n    return initialize;\n  };\n}\nfunction isNode(obj) {\n  return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';\n}","map":{"version":3,"sources":["load.ts"],"names":[],"mappings":"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","sourceRoot":"https://raw.githubusercontent.com/cheeriojs/cheerio/d1cbc66d53392ce8bf6cd0068f675836372d2bf3/src/","sourcesContent":["import { default as defaultOptions, flatten as flattenOptions, } from './options.js';\nimport * as staticMethods from './static.js';\nimport { Cheerio } from './cheerio.js';\nimport { isHtml, isCheerio } from './utils.js';\nexport function getLoad(parse, render) {\n    /**\n     * Create a querying function, bound to a document created from the provided markup.\n     *\n     * Note that similar to web browser contexts, this operation may introduce\n     * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n     * switch to fragment mode and disable this.\n     *\n     * @param content - Markup to be loaded.\n     * @param options - Options for the created instance.\n     * @param isDocument - Allows parser to be switched to fragment mode.\n     * @returns The loaded document.\n     * @see {@link https://cheerio.js.org#loading} for additional usage information.\n     */\n    return function load(content, options, isDocument = true) {\n        if (content == null) {\n            throw new Error('cheerio.load() expects a string');\n        }\n        const internalOpts = { ...defaultOptions, ...flattenOptions(options) };\n        const initialRoot = parse(content, internalOpts, isDocument, null);\n        /** Create an extended class here, so that extensions only live on one instance. */\n        class LoadedCheerio extends Cheerio {\n            _make(selector, context) {\n                const cheerio = initialize(selector, context);\n                cheerio.prevObject = this;\n                return cheerio;\n            }\n            _parse(content, options, isDocument, context) {\n                return parse(content, options, isDocument, context);\n            }\n            _render(dom) {\n                return render(dom, this.options);\n            }\n        }\n        function initialize(selector, context, root = initialRoot, opts) {\n            // $($)\n            if (selector && isCheerio(selector))\n                return selector;\n            const options = {\n                ...internalOpts,\n                ...flattenOptions(opts),\n            };\n            const r = typeof root === 'string'\n                ? [parse(root, options, false, null)]\n                : 'length' in root\n                    ? root\n                    : [root];\n            const rootInstance = isCheerio(r)\n                ? r\n                : new LoadedCheerio(r, null, options);\n            // Add a cyclic reference, so that calling methods on `_root` never fails.\n            rootInstance._root = rootInstance;\n            // $(), $(null), $(undefined), $(false)\n            if (!selector) {\n                return new LoadedCheerio(undefined, rootInstance, options);\n            }\n            const elements = typeof selector === 'string' && isHtml(selector)\n                ? // $(<html>)\n                    parse(selector, options, false, null).children\n                : isNode(selector)\n                    ? // $(dom)\n                        [selector]\n                    : Array.isArray(selector)\n                        ? // $([dom])\n                            selector\n                        : undefined;\n            const instance = new LoadedCheerio(elements, rootInstance, options);\n            if (elements) {\n                return instance;\n            }\n            if (typeof selector !== 'string') {\n                throw new Error('Unexpected type of selector');\n            }\n            // We know that our selector is a string now.\n            let search = selector;\n            const searchContext = !context\n                ? // If we don't have a context, maybe we have a root, from loading\n                    rootInstance\n                : typeof context === 'string'\n                    ? isHtml(context)\n                        ? // $('li', '<ul>...</ul>')\n                            new LoadedCheerio([parse(context, options, false, null)], rootInstance, options)\n                        : // $('li', 'ul')\n                            ((search = `${context} ${search}`), rootInstance)\n                    : isCheerio(context)\n                        ? // $('li', $)\n                            context\n                        : // $('li', node), $('li', [nodes])\n                            new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options);\n            // If we still don't have a context, return\n            if (!searchContext)\n                return instance;\n            /*\n             * #id, .class, tag\n             */\n            return searchContext.find(search);\n        }\n        // Add in static methods & properties\n        Object.assign(initialize, staticMethods, {\n            load,\n            // `_root` and `_options` are used in static methods.\n            _root: initialRoot,\n            _options: internalOpts,\n            // Add `fn` for plugins\n            fn: LoadedCheerio.prototype,\n            // Add the prototype here to maintain `instanceof` behavior.\n            prototype: LoadedCheerio.prototype,\n        });\n        return initialize;\n    };\n}\nfunction isNode(obj) {\n    return (!!obj.name ||\n        obj.type === 'root' ||\n        obj.type === 'text' ||\n        obj.type === 'comment');\n}\n//# sourceMappingURL=load.js.map"]},"metadata":{},"sourceType":"module"}